{"ts":1348592410655,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n* Application. Root class.\n**/   \nfunction App(id, motionDetector){\n    var self = this;\n    \n    //private\n    \n    var canvas = document.getElementById(id);\n    var ctx = canvas.getContext(\"2d\");\n    var interval;\n    var particles;\n\n    /**\n    * Fill canvas and redraw each particle.\n    **/\n    var draw = function(){\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.fillStyle = \"rgba(0, 0, 0, 1)\";\n        ctx.fillRect(0, 0, self.config.W, self.config.H);\n\n        //Update detector data.\n        motionDetector.update();\n        var blendedData = motionDetector.getBlended().data;\n\n        for(var t = 0, p, len = particles.length, average; t < len; t++) {\n            p = particles[t];\n            average = 0;\n            \n            // make an average between the color channel\n            for(var y = Math.floor(p.y - p.radius), yk = Math.floor(p.y + p.radius); y < yk; y++) {\n                for(var x = Math.floor(p.x - p.radius), xk = Math.floor(p.x + p.radius), b; x < xk; x++){\n                    b = Math.floor(x * 4 + y * self.config.W * 4);\n                    average += (blendedData[b] + blendedData[b + 1] + blendedData[b + 2]) / 3;\n                }\n            }\n            average = Math.round(average / (p.radius * p.radius * 4) );\n            \n            //Check average. If condition is true - select particle.\n            if(average > 20){\n                ctx.globalCompositeOperation = 'lighter';\n                p.select();\n            } else {\n                p.unselect();\n            }\n\n            p.process();\n\n            ctx.fillStyle = p.color;\n            ctx.beginPath();\n            ctx.arc(p.x, p.y, p.radius, 2 * Math.PI, false);\n            ctx.fill();\n        }\n    };\n    \n    /**\n    * Constructor function.\n    **/\n    var constructor = function(){\n        //create particles\n        particles = [];\n        for(var i = 0; i < self.config.particlesCount; i++){\n            particles.push(new Particle(self.config.W, self.config.H));\n        }\n        \n        interval = setInterval(draw, 30);\n    };\n    \n    //public\n    \n    /**\n    * Public configuration.\n    **/    \n    self.config = {\n        W: canvas.width,\n        H: canvas.height,\n        particlesCount: 3000\n    };\n    \n    /**\n    * Create particles again and redraw them.\n    **/\n    self.refresh = function(){\n        clearInterval(interval);\n        \n        constructor();\n    };\n    \n    constructor();\n}\n\n/**\n* Particle class\n**/  \nfunction Particle(maxX, maxY){\n    var self = this;\n    \n    //private\n    /**\n    * Constructor\n    **/ \n    var constructor = function(){\n        self.x = Math.floor(Math.random() * maxX);\n        self.y =  Math.floor(Math.random() * maxY);\n        self.opacity = Math.random();\n        self.radius = Math.random() * 1.5 + 1;\n        self.color = \"rgba(16, 32, 64, \" + self.opacity + \")\";\n        self.oldRadius = self.radius;\n        \n        self.vx = Math.random() * 2 - 1;\n        self.vy = Math.random() * 2 - 1;\n        self.vo = Math.random() - 0.5;\n    };\n    \n    //public\n    /**\n    * Select particle\n    **/ \n    self.select = function(){\n        self.color = \"rgba(255, 64, 128, \" + self.opacity + \")\";\n        self.vx = Math.random() * 2 - 1;\n        self.vy = Math.random() * 2 - 1;\n        self.vo = Math.random() - 0.5;\n        self.radius = 2.5;\n    };\n    \n    /**\n    * Unselect particle\n    **/    \n    self.unselect = function(){\n        self.color = \"rgba(16, 32, 64, \" + self.opacity + \")\";\n        self.radius = self.oldRadius;\n    };\n    \n    /**\n    * Calculate next position and form of the particle.\n    **/    \n    self.process = function(){\n        if(self.x < 0){\n            self.vx = Math.random();\n        } else if(self.x > maxX){\n            self.vx = Math.random() * -1;\n        }\n\n        if(self.y < 0){\n            self.vy = Math.random();\n        } else if(self.y > maxY){\n            self.vy = Math.random() * -1;\n        }\n\n        if(self.opacity < 0){\n            self.vo = Math.random() * 0.5;\n        } else if(self.opacity > 1){\n            self.vo = Math.random() * -0.5;\n        }\n\n        self.x += self.vx;\n        self.y += self.vy;\n        self.opacity += self.vo;        \n    };\n    \n    constructor();\n}"]],"start1":0,"start2":0,"length1":0,"length2":4239}]],"length":4239}
